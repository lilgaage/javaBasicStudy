package ObjectOriented.BasicFeature.Polymorphic.Change;

public class Define {
    /*
    引用类型转换：
        多态的转型分为向上转型与向下转型两种：
            向上转型：多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。
                    当父类引用指向一个子类对象时，便是向上转型。
                    使用格式：
                        父类类型 变量名 = new 子类类型();
                        Animal a = new Cat();
            向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。
                    一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。
                    使用格式：
                        子类类型 变量名 = (子类类型) 父类变量名;
                        Cat c = （Cat） a;
     */
    /*
    为什么要转型？
        当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。
        也就是说，不能调用子类拥有而父类没有的方法。这也是多态带来的一点“小麻烦”。
        所以，想要调用子类特有的方法，必须做向下转型。
     */
}
