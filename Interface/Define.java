package Interface;

public class Define {
    /*
    接口是java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，
    那么接口的内部主要就是封装了方法，包含抽象方法（jdk7及以前），默认方法和静态方法（jdk8），私有方法jdk9

    接口的定义与定义类方式相似，但是使用interface关键字。也会被编译成.class文件，但一定要明确不是类，而是另外一种引用数据类型。
    引用数据类型：数组、类、接口

    接口的使用，不能创建对象，但是可以被实现（implements，类似于继承）。
    一个实现接口的类可以看做是接口的子类，需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则必须是一个抽象类
     */

    // 定义格式：
        public interface interfaceName {
            // 抽象方法---可以省略，没有方法体。该方法供子类实现使用
            public abstract void method1();
            // 默认方法---不可省略，供子类调用或子类重写
            public default void method2() {

            }
            // 静态方法---供接口直接调用
            public static void method3() {

            }
            // 私有方法---供接口中的默认方法或者静态方法调用
//            private void method4() {
//
//            }
    }


    // 基本的实现
    /*
    类与接口的关系为实现关系，即类实现接口，该类可以称为接口的实现类，也可以称为接口的子类。
    实现的动作类似继承，格式相仿，只是关键字不同，实现使用implements关键字。
    非抽象子类实现接口：
        1.必须重写接口中所有抽象方法
        2.继承了接口的默认方法，即可以直接调用，也可以重写
    实现格式：
        class 类名 implements 接口名 {
            // 重写接口中抽象方法【必须】
            // 重写接口中默认方法【可选】
        }


     */

}
