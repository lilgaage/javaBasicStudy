package MoreThread;

public class Define {
    /* 多线程
        并发：两个或多个事件在同一时间段内发生
        并行：两个或多个事件在同一时刻发生（同时发生）
            在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有多个程序同时运行，
            这在单cpu系统中，每一时刻只能有一道程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，
            那是因为分时交替运行的时间是非常短的。
            而在多个cpu系统中，则这些可以并发执行的程序便可以分配到多个处理器上（cpu），
            实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。
            目前电脑市场上说的多核cpu，便是多核处理器，核越多，并行处理的程序越多，能大大提高电脑运行效率。
            注意：单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个cpu上并发运行。
                同理，线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，
                即一个线程一个线程的去运行，当系统只有一个cpu时，线程会以某种顺序执行多个线程，
                我们把这种情况称之为线程调度。
        进程：一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；
            进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。
        线程：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。
            一个进程中可以有多个线程，这个应用程序可称之为多线程程序。
          简而言之：一个程序运行后至少有一个进程，一个进程可以包含多个线程。
        线程调度：
            分时调度：所有线程轮流使用cpu的使用权，平均分配每个线程占用cpu的时间
            抢占式调度：优先让优先级高的线程使用cpu，如果线程的优先级相同，那么会随机选择一个（线程随机性），
            java使用的为抢占式调度。
                设置线程的优先级 windows可右键线程名-->设置优先级

        抢占式调度详解：
            大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。
            cpu使用抢占式调度模式在多个线程间进行高速的切换。对于cpu的一个核而言，某一时刻，
            只能运行一个线程，而cpu在多个线程间切换速度相对于我们的感觉速度要快，看上去就是在同一时刻运行。
            其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让cpu的使用率更高。

        创建线程类：
            java使用java.lang.Thread类代表线程，所有线程对象都必须是Thread类或其子类的实例。
            每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。
            java使用线程执行来代表这段程序流。通过继承Thread类来创建并启动多线程的步骤如下：
                1.定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务，
                因此把run()方法称为线程执行体。
                2.创建Thread子类的实例，即创建了线程对象
                3.调用线程对象的start()方法来启动该线程。
     */
    public static void main(String[] args) {
        System.out.println("这里是main线程");
        MyThread myThread = new MyThread("小琳");
        // 开启新线程
        myThread.start();
        for (int i = 0; i < 10; i++) {
            System.out.println("遛狗" + i);
        }
    }
    /**
     * 程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时被创建。随着调用mt对象的startff，
     * 另外一个新的线程也启动了，这样，整个应用就在多线程下运行。
     * 多线程执行时，在栈内存中，其实每一个执行线程都有一片自己所属的栈内存空间。进行方法的压栈和弹栈。
     *
     * java命令之后由jvm完成main线程开启一个main的栈空间
     * start()通知jvm要开新的线程空间了，并且在新空间里执行线程对象的run()方法
     * 当执行线程的任务结束了，线程自动在栈内存中释放了。但是当所有的执行线程都结束了，那么进程就结束了。
     */
}
